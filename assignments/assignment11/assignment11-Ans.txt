1. Create an assert statement that throws an AssertionError if the variable spam is a negative
integer.
-->
spam = -10
assert spam > 0, "spam should be posistive only."

2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain
strings that are the same as each other, even if their cases are different (that is, hello and hello are
considered the same, and goodbye and GOODbye are also considered the same).
-->
eggs = "Goodbye"
bacon = "GOODbye"
assert eggs.casefold() == bacon.casefold(), "String are not same"

3. Create an assert statement that throws an AssertionError every time.
--> assert 0==1, "throw everytime"

4. What are the two lines that must be present in your software in order to call logging.debug()?
-->
import logging

logging.debug()

# Create and configure logger
logging.basicConfig(filename="newfile.log",
                    format='%(asctime)s %(message)s',
                    filemode='w')

 

5. What are the two lines that your program must have in order to have logging.debug() send a
logging message to a file named programLog.txt?

--># Create and configure logger
logging.basicConfig(filename="programLog.txt",
                    format='%(asctime)s %(message)s',
                    filemode='w')
 

6. What are the five levels of logging?
--> DEBUG - Detailed information, typically of interest when diagnosing problems.
    INFO - Confirmation of things working as expected.
    WARNING - Indication of something unexpected or a problem in the near future e.g. 'disk space low'.
    ERROR - A more serious problem due to which the program was unable to perform a function.
    CRITICAL - A serious error, indicating that the program itself may not be able to continue executing.

7. What line of code would you add to your software to disable all logging messages?
--> logger.disabled = True

8.Why is using logging messages better than using print() to display the same message?
--> Easy to see where and when (even what line no.) a logging call is being made from.
You can log to files, sockets, pretty much anything, all at the same time.
You can differentiate your logging based on severity.

9. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?
--> Step Over command:This command lets the application execute the next action. 
        If the action involves a call to an operation, it does not step into its implementation (it steps over it instead).
    Step Into command:This command lets the application execute the next action. 
        If the action involves a call to an operation, it steps into its implementation and breaks the execution on the 
        first action of that implementation.
    Step Out command:This command lets the application execute until the currently executed operation 
        implementation is returned.

10.After you click Continue, when will the debugger stop ?
--> It will continue to next break point or to the end of the program if there is no break point.

11. What is the concept of a breakpoint?
--> it will break the execution of the program, to what ever line the break point is set.
